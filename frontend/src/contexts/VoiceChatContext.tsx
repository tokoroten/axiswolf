import { createContext, useContext, useEffect, useState, useRef, useCallback, type ReactNode } from 'react';
import Peer, { type MediaConnection } from 'peerjs';

interface VoiceChatContextType {
  isEnabled: boolean;
  isMuted: boolean;
  volume: number;
  micGain: number; // „Éû„Ç§„ÇØ„Ç≤„Ç§„É≥ 0-100
  isConnected: boolean;
  connectedPeers: string[];
  myPeerId: string | null;
  audioLevel: number; // Âèó‰ø°Èü≥Â£∞„É¨„Éô„É´ 0-100
  micLevel: number; // „Éû„Ç§„ÇØÂÖ•Âäõ„É¨„Éô„É´ 0-100
  toggleMute: () => void;
  setVolume: (volume: number) => void;
  setMicGain: (gain: number) => void;
  initializeVoiceChat: (roomCode: string, playerId: string, ws: WebSocket | null) => void;
  disconnectVoiceChat: () => void;
  connectToPeer: (remotePeerId: string, remotePlayerId: string) => void;
}

const VoiceChatContext = createContext<VoiceChatContextType | null>(null);

export function useVoiceChat() {
  const context = useContext(VoiceChatContext);
  if (!context) {
    throw new Error('useVoiceChat must be used within a VoiceChatProvider');
  }
  return context;
}

interface VoiceChatProviderProps {
  children: ReactNode;
}

export function VoiceChatProvider({ children }: VoiceChatProviderProps) {
  const [isEnabled, setIsEnabled] = useState(false);
  const [isMuted, setIsMuted] = useState(false);
  const [volume, setVolumeState] = useState(100);
  const [micGain, setMicGainState] = useState(100); // „Éá„Éï„Ç©„É´„Éà100%
  const [isConnected, setIsConnected] = useState(false);
  const [connectedPeers, setConnectedPeers] = useState<string[]>([]);
  const [myPeerId, setMyPeerId] = useState<string | null>(null);
  const [audioLevel, setAudioLevel] = useState(0); // Âèó‰ø°Èü≥Â£∞„É¨„Éô„É´
  const [micLevel, setMicLevel] = useState(0); // „Éû„Ç§„ÇØÂÖ•Âäõ„É¨„Éô„É´

  const peerRef = useRef<Peer | null>(null);
  const localStreamRef = useRef<MediaStream | null>(null);
  const audioContextRef = useRef<AudioContext | null>(null);
  const gainNodeRef = useRef<GainNode | null>(null);
  const micGainNodeRef = useRef<GainNode | null>(null); // „Éû„Ç§„ÇØ„Ç≤„Ç§„É≥Áî®
  const connectionsRef = useRef<Map<string, MediaConnection>>(new Map());
  const wsRef = useRef<WebSocket | null>(null);
  const myPlayerIdRef = useRef<string | null>(null);
  const remoteAudiosRef = useRef<Map<string, HTMLAudioElement>>(new Map());
  const analyserNodesRef = useRef<Map<string, AnalyserNode>>(new Map());
  const audioLevelIntervalRef = useRef<NodeJS.Timeout | null>(null);
  const micLevelIntervalRef = useRef<NodeJS.Timeout | null>(null);

  const toggleMute = () => {
    if (localStreamRef.current) {
      const audioTrack = localStreamRef.current.getAudioTracks()[0];
      if (audioTrack) {
        audioTrack.enabled = !audioTrack.enabled;
        setIsMuted(!audioTrack.enabled);
      }
    }
  };

  const setVolume = (newVolume: number) => {
    setVolumeState(newVolume);
    // „Åô„Åπ„Å¶„ÅÆ„É™„É¢„Éº„Éà„Ç™„Éº„Éá„Ç£„Ç™ÔºàÂÆüÈöõ„ÅØGainNodeÔºâ„ÅÆÈü≥Èáè„ÇíÊõ¥Êñ∞
    remoteAudiosRef.current.forEach((gainNode: any) => {
      if (gainNode && gainNode.gain) {
        gainNode.gain.value = Math.min(3.0, newVolume / 100);
      }
    });
  };

  const setMicGain = (newGain: number) => {
    setMicGainState(newGain);
    // „Éû„Ç§„ÇØ„Ç≤„Ç§„É≥„Éé„Éº„Éâ„ÅåÂ≠òÂú®„Åô„ÇãÂ†¥Âêà„ÅØÊõ¥Êñ∞
    if (micGainNodeRef.current) {
      micGainNodeRef.current.gain.value = newGain / 100;
    }
  };

  const initializeVoiceChat = useCallback(async (roomCode: string, playerId: string, ws: WebSocket | null) => {
    try {
      console.log('[VoiceChat] Initializing voice chat', { roomCode, playerId });

      // Êó¢Â≠ò„ÅÆPeer„Åå„ÅÇ„Çå„Å∞ÂÖà„Å´Á†¥Ê£Ñ„Åó„Å¶Â∞ë„ÅóÂæÖ„Å§
      if (peerRef.current) {
        console.log('[VoiceChat] Destroying existing peer before creating new one');
        peerRef.current.destroy();
        peerRef.current = null;
        // PeerJS„Çµ„Éº„Éê„Éº„ÅåÂè§„ÅÑÊé•Á∂ö„Çí„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„Åô„ÇãÊôÇÈñì„Çí‰∏é„Åà„Çã
        await new Promise(resolve => setTimeout(resolve, 1000));
      }

      wsRef.current = ws;
      myPlayerIdRef.current = playerId;

      // „Éû„Ç§„ÇØË®±ÂèØ„ÇíÂèñÂæóÔºà„Ç®„Ç≥„Éº„Ç≠„É£„É≥„Çª„É¨„Éº„Ç∑„Éß„É≥ÁÑ°ÂäπÂåñÔºâ
      const stream = await navigator.mediaDevices.getUserMedia({
        audio: {
          echoCancellation: false,
          noiseSuppression: false,
          autoGainControl: false
        },
        video: false
      });
      localStreamRef.current = stream;
      console.log('üé§ [VoiceChat/Mic] Got local media stream');

      // „Éà„É©„ÉÉ„ÇØ„ÅÆ„Éü„É•„Éº„ÉàÁä∂ÊÖã„ÇíÁ¢∫Ë™ç„ÉªËß£Èô§
      stream.getAudioTracks().forEach(track => {
        if (track.muted) {
          console.warn('‚ö†Ô∏è [VoiceChat/Mic] Audio track is muted, attempting to unmute');
          // „Éü„É•„Éº„ÉàÁä∂ÊÖã„ÅÆÂ†¥Âêà„ÄÅ„Éà„É©„ÉÉ„ÇØ„ÇíÊúâÂäπÂåñ
          track.enabled = true;
        }
      });

      console.log('üé§ [VoiceChat/Mic] Audio tracks:', stream.getAudioTracks().map(t => ({
        id: t.id,
        kind: t.kind,
        label: t.label,
        enabled: t.enabled,
        muted: t.muted,
        readyState: t.readyState,
        settings: t.getSettings()
      })));

      // AudioContext„Çí‰ΩúÊàê„Åó„Å¶Èü≥ÈáèÂà∂Âæ°„ÇíË®≠ÂÆö
      const audioContext = new AudioContext();
      const gainNode = audioContext.createGain();
      gainNode.gain.value = volume / 100;
      audioContextRef.current = audioContext;
      gainNodeRef.current = gainNode;

      // Ëá™ÂàÜ„ÅÆ„Éû„Ç§„ÇØÂÖ•ÂäõÁî®„ÅÆAnalyserNode„Å®„Ç≤„Ç§„É≥„Éé„Éº„Éâ„Çí‰ΩúÊàê
      try {
        const localSource = audioContext.createMediaStreamSource(stream);

        // „Éû„Ç§„ÇØ„Ç≤„Ç§„É≥Áî®„ÅÆGainNode„Çí‰ΩúÊàê
        const micGainNode = audioContext.createGain();
        micGainNode.gain.value = micGain / 100;
        micGainNodeRef.current = micGainNode;

        // Analyser„Éé„Éº„Éâ„Çí‰ΩúÊàêÔºà„É¨„Éô„É´Áõ£Ë¶ñÁî®Ôºâ
        const localAnalyser = audioContext.createAnalyser();
        localAnalyser.fftSize = 256;
        localAnalyser.smoothingTimeConstant = 0.8;

        // Êé•Á∂ö: „Éû„Ç§„ÇØ ‚Üí „Ç≤„Ç§„É≥ ‚Üí Analyser
        localSource.connect(micGainNode);
        micGainNode.connect(localAnalyser);

        analyserNodesRef.current.set('local', localAnalyser);

        console.log('[VoiceChat] Created analyser and gain nodes for local microphone');
      } catch (err) {
        console.error('[VoiceChat] Failed to create local analyser node:', err);
      }

      // ÂÆåÂÖ®„Å´„É©„É≥„ÉÄ„É†„Å™Peer ID„ÇíÁîüÊàêÔºàUUID„ÅÆ„Çà„ÅÜ„Å™ÂΩ¢ÂºèÔºâ
      const randomId = `${Date.now()}-${Math.random().toString(36).substring(2, 15)}`;
      console.log('[VoiceChat] Creating peer with random ID:', randomId);

      // PeerJS„Çµ„Éº„Éê„Éº„ÅÆË®≠ÂÆöÔºàÁí∞Â¢ÉÂ§âÊï∞„Åã„ÇâÂèñÂæóÔºâ
      const peerHost = import.meta.env.VITE_PEERJS_HOST || 'localhost';
      const peerPort = Number(import.meta.env.VITE_PEERJS_PORT) || 9000;
      const peerPath = import.meta.env.VITE_PEERJS_PATH || '/';

      console.log('[VoiceChat] PeerJS server config:', { host: peerHost, port: peerPort, path: peerPath });

      const peer = new Peer(randomId, {
        host: peerHost,
        port: peerPort,
        path: peerPath,
        debug: 2,
        config: {
          iceServers: [
            { urls: 'stun:stun.l.google.com:19302' },
            { urls: 'stun:stun1.l.google.com:19302' }
          ]
        }
      });

      peerRef.current = peer;

      peer.on('open', (id) => {
        console.log('üü¢ [VoiceChat/P2P] Peer connected with ID:', id);
        setMyPeerId(id);
        setIsConnected(true);

        // WebSocket„ÅßËá™ÂàÜ„ÅÆPeer ID„Çí„Éñ„É≠„Éº„Éâ„Ç≠„É£„Çπ„Éà
        const broadcastPeerId = () => {
          if (ws && ws.readyState === WebSocket.OPEN) {
            const message = {
              type: 'vc_peer_id',
              player_id: playerId,
              peer_id: id,
            };
            ws.send(JSON.stringify(message));
            console.log('üì§ [VoiceChat/P2P] Sent peer ID to server:', message);
          } else {
            console.warn('‚ö†Ô∏è [VoiceChat/P2P] WebSocket not ready, waiting...', ws?.readyState);
            // WebSocket„ÅåÊé•Á∂ö„Åï„Çå„Çã„Åæ„ÅßÂæÖ„Å§ÔºàÊúÄÂ§ß5ÁßíÈñì„ÄÅ100ms„Åî„Å®„Å´„ÉÅ„Çß„ÉÉ„ÇØÔºâ
            let retries = 0;
            const maxRetries = 50;
            const checkInterval = setInterval(() => {
              retries++;
              if (ws && ws.readyState === WebSocket.OPEN) {
                clearInterval(checkInterval);
                const message = {
                  type: 'vc_peer_id',
                  player_id: playerId,
                  peer_id: id,
                };
                ws.send(JSON.stringify(message));
                console.log('üì§ [VoiceChat/P2P] Sent peer ID to server (after waiting):', message);
              } else if (retries >= maxRetries) {
                clearInterval(checkInterval);
                console.error('üî¥ [VoiceChat/P2P] WebSocket not ready after 5 seconds, giving up');
              }
            }, 100);
          }
        };

        // Âç≥Â∫ß„Å´ÈÄÅ‰ø°Ôºà„Åæ„Åü„ÅØÂæÖÊ©üÔºâ
        broadcastPeerId();

        // 1ÁßíÂæå„Å´ÂÜçÈÄÅ‰ø°Ôºà‰ªñ„ÅÆ„Éó„É¨„Ç§„É§„Éº„ÅÆVCÊé•Á∂ö„ÇíÂæÖ„Å§„Åü„ÇÅÔºâ
        setTimeout(() => {
          console.log('üîÅ [VoiceChat/P2P] Re-broadcasting peer ID for late joiners');
          broadcastPeerId();
        }, 1000);
      });

      peer.on('call', (call) => {
        console.log('üìû [VoiceChat/P2P] Receiving call from:', call.peer);

        // ÁùÄ‰ø°„Å´ÂøúÁ≠î
        call.answer(stream);
        connectionsRef.current.set(call.peer, call);
        console.log('‚úÖ [VoiceChat/P2P] Answered call from:', call.peer);

        call.on('stream', (remoteStream) => {
          console.log('üéµ [VoiceChat/Receive] Received remote stream from:', call.peer);
          console.log('üéµ [VoiceChat/Receive] Stream tracks:', remoteStream.getTracks().map(t => ({ kind: t.kind, enabled: t.enabled, muted: t.muted })));
          playRemoteStream(remoteStream, call.peer);
          setConnectedPeers((prev) => [...new Set([...prev, call.peer])]);
        });

        call.on('close', () => {
          console.log('üîå [VoiceChat/P2P] Call closed:', call.peer);
          connectionsRef.current.delete(call.peer);
          setConnectedPeers((prev) => prev.filter((id) => id !== call.peer));
        });

        call.on('error', (err) => {
          console.error('üî¥ [VoiceChat/P2P] Call error:', call.peer, err);
        });
      });

      peer.on('error', (err) => {
        console.error('[VoiceChat] Peer error:', err);
        setIsConnected(false);
      });

      peer.on('disconnected', () => {
        console.log('[VoiceChat] Peer disconnected');
        setIsConnected(false);
      });

      setIsEnabled(true);
    } catch (error) {
      console.error('[VoiceChat] Failed to initialize voice chat:', error);
      alert('„Éû„Ç§„ÇØ„Å∏„ÅÆ„Ç¢„ÇØ„Çª„Çπ„ÅåÊãíÂê¶„Åï„Çå„Åæ„Åó„Åü„ÄÇ„Éñ„É©„Ç¶„Ç∂„ÅÆË®≠ÂÆö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
    }
  }, [volume]);

  const connectToPeer = useCallback((remotePeerId: string, remotePlayerId: string) => {
    if (!peerRef.current || !localStreamRef.current) {
      console.warn('‚ö†Ô∏è [VoiceChat/P2P] Cannot connect: peer or stream not ready');
      return;
    }

    // Êó¢„Å´Êé•Á∂öÊ∏à„Åø„ÅÆÂ†¥Âêà„ÅØ„Çπ„Ç≠„ÉÉ„Éó
    if (connectionsRef.current.has(remotePeerId)) {
      console.log('‚è≠Ô∏è [VoiceChat/P2P] Already connected to:', remotePeerId);
      return;
    }

    // Ëá™ÂàÜËá™Ë∫´„Å´„ÅØÊé•Á∂ö„Åó„Å™„ÅÑ
    if (remotePlayerId === myPlayerIdRef.current) {
      console.log('‚è≠Ô∏è [VoiceChat/P2P] Skipping self-connection');
      return;
    }

    console.log('üìû [VoiceChat/P2P] Calling peer:', { remotePeerId, remotePlayerId });
    console.log('üì§ [VoiceChat/Send] Local stream tracks:', localStreamRef.current.getTracks().map(t => ({
      kind: t.kind,
      enabled: t.enabled,
      muted: t.muted,
      readyState: t.readyState,
      id: t.id
    })));
    console.log('üì§ [VoiceChat/Send] Local stream details:', {
      id: localStreamRef.current.id,
      active: localStreamRef.current.active,
      trackCount: localStreamRef.current.getTracks().length
    });

    try {
      const call = peerRef.current.call(remotePeerId, localStreamRef.current);
      connectionsRef.current.set(remotePeerId, call);
      console.log('‚úÖ [VoiceChat/P2P] Call initiated to:', remotePeerId);
      console.log('‚úÖ [VoiceChat/P2P] Call metadata:', {
        peer: call.peer,
        type: call.type,
        open: call.open
      });

      call.on('stream', (remoteStream) => {
        console.log('üéµ [VoiceChat/Receive] Received remote stream from:', remotePeerId);
        console.log('üéµ [VoiceChat/Receive] Stream tracks:', remoteStream.getTracks().map(t => ({ kind: t.kind, enabled: t.enabled, muted: t.muted })));
        playRemoteStream(remoteStream, remotePeerId);
        setConnectedPeers((prev) => [...new Set([...prev, remotePeerId])]);
      });

      call.on('close', () => {
        console.log('üîå [VoiceChat/P2P] Call closed:', remotePeerId);
        connectionsRef.current.delete(remotePeerId);
        setConnectedPeers((prev) => prev.filter((id) => id !== remotePeerId));
      });

      call.on('error', (err) => {
        console.error('üî¥ [VoiceChat/P2P] Call error:', remotePeerId, err);
        connectionsRef.current.delete(remotePeerId);
        setConnectedPeers((prev) => prev.filter((id) => id !== remotePeerId));
      });
    } catch (error) {
      console.error('üî¥ [VoiceChat/P2P] Failed to call peer:', error);
    }
  }, []);

  const playRemoteStream = (stream: MediaStream, peerId: string) => {
    console.log('üîß [VoiceChat/Play] Setting up remote stream for peer:', peerId);
    console.log('üîß [VoiceChat/Play] Remote stream details:', {
      id: stream.id,
      active: stream.active,
      tracks: stream.getTracks().map(t => ({
        id: t.id,
        kind: t.kind,
        label: t.label,
        enabled: t.enabled,
        muted: t.muted,
        readyState: t.readyState,
        settings: t.getSettings()
      }))
    });

    // AudioContext„Åå„Å™„ÅÑÂ†¥Âêà„ÅØ‰ΩúÊàê
    if (!audioContextRef.current) {
      audioContextRef.current = new AudioContext();
      console.log('üéõÔ∏è [VoiceChat/Play] Created new AudioContext');
    }

    const audioContext = audioContextRef.current;

    // AudioContext„ÇíÂÜçÈñãÔºà‰∏ÄÈÉ®„ÅÆ„Éñ„É©„Ç¶„Ç∂„ÅßÂøÖË¶ÅÔºâ
    if (audioContext.state === 'suspended') {
      console.log('‚è∏Ô∏è [VoiceChat/Play] AudioContext suspended, resuming...');
      audioContext.resume().then(() => {
        console.log('‚ñ∂Ô∏è [VoiceChat/Play] AudioContext resumed');
      });
    } else {
      console.log('‚ñ∂Ô∏è [VoiceChat/Play] AudioContext state:', audioContext.state);
    }

    // Èü≥Â£∞„É¨„Éô„É´Ê§úÂá∫Áî®„ÅÆAnalyserNode„Å®GainNode„Çí‰ΩúÊàê
    try {
      const source = audioContext.createMediaStreamSource(stream);
      const gainNode = audioContext.createGain();
      const analyser = audioContext.createAnalyser();

      // Èü≥Èáè„Çí300%„Åæ„ÅßÂØæÂøúÔºàgainÂÄ§„ÅØ3.0„Åæ„ÅßÔºâ
      gainNode.gain.value = Math.min(3.0, volume / 100);

      analyser.fftSize = 256;
      analyser.smoothingTimeConstant = 0.8;

      // Êé•Á∂ö: „ÇΩ„Éº„Çπ ‚Üí „Ç≤„Ç§„É≥ ‚Üí Analyser ‚Üí „Çπ„Éî„Éº„Ç´„Éº
      source.connect(gainNode);
      gainNode.connect(analyser);
      analyser.connect(audioContext.destination);

      analyserNodesRef.current.set(peerId, analyser);
      remoteAudiosRef.current.set(peerId, gainNode as any);

      console.log('‚úÖ [VoiceChat/Play] Audio pipeline created:', {
        peerId,
        gain: gainNode.gain.value,
        contextState: audioContext.state,
        destination: audioContext.destination,
      });

      // ÂÆöÊúüÁöÑ„Å´Èü≥Â£∞„É¨„Éô„É´„Çí„ÉÅ„Çß„ÉÉ„ÇØÔºà„Éá„Éê„ÉÉ„Ç∞Áî®Ôºâ
      let checkCount = 0;
      const levelCheckInterval = setInterval(() => {
        checkCount++;
        const dataArray = new Uint8Array(analyser.frequencyBinCount);
        analyser.getByteFrequencyData(dataArray);
        const average = dataArray.reduce((sum, value) => sum + value, 0) / dataArray.length;
        const max = Math.max(...dataArray);

        console.log(`üéµ [VoiceChat/Play] Audio level check ${checkCount} for`, peerId, ':', {
          average: average.toFixed(2),
          max: max,
          samples: dataArray.slice(0, 10) // ÊúÄÂàù„ÅÆ10„Çµ„É≥„Éó„É´„ÇíË°®Á§∫
        });

        // 10Âõû„ÉÅ„Çß„ÉÉ„ÇØ„Åó„Åü„ÇâÂÅúÊ≠¢
        if (checkCount >= 10) {
          clearInterval(levelCheckInterval);
          console.log('üéµ [VoiceChat/Play] Level check completed for', peerId);
        }
      }, 1000); // 1Áßí„Åî„Å®„Å´„ÉÅ„Çß„ÉÉ„ÇØ
    } catch (err) {
      console.error('üî¥ [VoiceChat/Play] Failed to create audio pipeline:', err);
    }
  };

  const disconnectVoiceChat = useCallback(() => {
    console.log('[VoiceChat] Disconnecting voice chat');

    // Èü≥Â£∞„É¨„Éô„É´Áõ£Ë¶ñ„ÇíÂÅúÊ≠¢
    if (audioLevelIntervalRef.current) {
      clearInterval(audioLevelIntervalRef.current);
      audioLevelIntervalRef.current = null;
    }
    if (micLevelIntervalRef.current) {
      clearInterval(micLevelIntervalRef.current);
      micLevelIntervalRef.current = null;
    }

    // „Åô„Åπ„Å¶„ÅÆÊé•Á∂ö„ÇíÂàáÊñ≠
    connectionsRef.current.forEach((call) => {
      call.close();
    });
    connectionsRef.current.clear();

    // „É™„É¢„Éº„Éà„Ç™„Éº„Éá„Ç£„Ç™ÔºàGainNodeÔºâ„Çí„ÇØ„É™„Ç¢
    // GainNode„ÅØËá™ÂãïÁöÑ„Å´ÂàáÊñ≠„Åï„Çå„Çã„ÅÆ„ÅßÁâπÂà•„Å™Âá¶ÁêÜ„ÅØ‰∏çË¶Å
    remoteAudiosRef.current.clear();

    // Analyser„Éé„Éº„Éâ„Çí„ÇØ„É™„Ç¢
    analyserNodesRef.current.clear();

    // „É≠„Éº„Ç´„É´„Çπ„Éà„É™„Éº„É†„ÇíÂÅúÊ≠¢
    if (localStreamRef.current) {
      localStreamRef.current.getTracks().forEach((track) => track.stop());
      localStreamRef.current = null;
    }

    // Peer„ÇíÁ†¥Ê£Ñ
    if (peerRef.current) {
      peerRef.current.destroy();
      peerRef.current = null;
    }

    // AudioContext„Çí„ÇØ„É≠„Éº„Ç∫
    if (audioContextRef.current && 'close' in audioContextRef.current) {
      audioContextRef.current.close();
      audioContextRef.current = null;
    }

    // „Ç≤„Ç§„É≥„Éé„Éº„Éâ„Çí„ÇØ„É™„Ç¢
    micGainNodeRef.current = null;

    setIsEnabled(false);
    setIsConnected(false);
    setConnectedPeers([]);
    setAudioLevel(0);
    setMicLevel(0);
  }, []);

  // „Éû„Ç§„ÇØÂÖ•Âäõ„É¨„Éô„É´„ÇíÁõ£Ë¶ñ
  useEffect(() => {
    const localAnalyser = analyserNodesRef.current.get('local');
    if (!localAnalyser) {
      return;
    }

    console.log('üé§ [VoiceChat/Mic] Starting microphone level monitoring');

    // Êó¢Â≠ò„ÅÆÁõ£Ë¶ñ„Åå„ÅÇ„Çå„Å∞„ÇØ„É™„Ç¢
    if (micLevelIntervalRef.current) {
      clearInterval(micLevelIntervalRef.current);
    }

    // 100ms„Åî„Å®„Å´„Éû„Ç§„ÇØ„É¨„Éô„É´„Çí„ÉÅ„Çß„ÉÉ„ÇØ
    micLevelIntervalRef.current = setInterval(() => {
      const dataArray = new Uint8Array(localAnalyser.frequencyBinCount);
      localAnalyser.getByteFrequencyData(dataArray);

      // ÂÖ®Âë®Ê≥¢Êï∞„ÅÆÂπ≥Âùá„ÇíË®àÁÆó
      const average = dataArray.reduce((sum, value) => sum + value, 0) / dataArray.length;
      // 0-255„Çí0-100„Å´Ê≠£Ë¶èÂåñ
      const level = Math.min(100, (average / 255) * 100 * 2); // ÊÑüÂ∫¶„Çí2ÂÄç„Å´

      setMicLevel(Math.round(level));
    }, 100);

    return () => {
      if (micLevelIntervalRef.current) {
        clearInterval(micLevelIntervalRef.current);
        micLevelIntervalRef.current = null;
      }
    };
  }, [isEnabled]);

  // Âèó‰ø°Èü≥Â£∞„É¨„Éô„É´„ÇíÁõ£Ë¶ñÔºà„É™„É¢„Éº„Éà„ÅÆ„ÅøÔºâ
  useEffect(() => {
    // „É≠„Éº„Ç´„É´„ÇíÈô§„Åè„É™„É¢„Éº„Éà„ÅÆAnalyser„Åå1„Å§„ÇÇ„Å™„ÅÑÂ†¥Âêà„ÅØÁõ£Ë¶ñ„Åó„Å™„ÅÑ
    const remoteAnalysers = Array.from(analyserNodesRef.current.entries()).filter(([key]) => key !== 'local');
    if (remoteAnalysers.length === 0) {
      setAudioLevel(0);
      return;
    }

    console.log('üîä [VoiceChat/Receive] Starting remote audio level monitoring for', remoteAnalysers.length, 'peer(s)');

    // Êó¢Â≠ò„ÅÆÁõ£Ë¶ñ„Åå„ÅÇ„Çå„Å∞„ÇØ„É™„Ç¢
    if (audioLevelIntervalRef.current) {
      clearInterval(audioLevelIntervalRef.current);
    }

    // 100ms„Åî„Å®„Å´Èü≥Â£∞„É¨„Éô„É´„Çí„ÉÅ„Çß„ÉÉ„ÇØ
    audioLevelIntervalRef.current = setInterval(() => {
      let maxLevel = 0;

      remoteAnalysers.forEach(([, analyser]) => {
        const dataArray = new Uint8Array(analyser.frequencyBinCount);
        analyser.getByteFrequencyData(dataArray);

        // ÂÖ®Âë®Ê≥¢Êï∞„ÅÆÂπ≥Âùá„ÇíË®àÁÆó
        const average = dataArray.reduce((sum, value) => sum + value, 0) / dataArray.length;
        // 0-255„Çí0-100„Å´Ê≠£Ë¶èÂåñ
        const level = Math.min(100, (average / 255) * 100 * 2); // ÊÑüÂ∫¶„Çí2ÂÄç„Å´

        if (level > maxLevel) {
          maxLevel = level;
        }
      });

      setAudioLevel(Math.round(maxLevel));
    }, 100);

    return () => {
      if (audioLevelIntervalRef.current) {
        clearInterval(audioLevelIntervalRef.current);
        audioLevelIntervalRef.current = null;
      }
    };
  }, [connectedPeers]);

  // „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
  useEffect(() => {
    return () => {
      disconnectVoiceChat();
    };
  }, []);

  return (
    <VoiceChatContext.Provider
      value={{
        isEnabled,
        isMuted,
        volume,
        micGain,
        isConnected,
        connectedPeers,
        myPeerId,
        audioLevel,
        micLevel,
        toggleMute,
        setVolume,
        setMicGain,
        initializeVoiceChat,
        disconnectVoiceChat,
        connectToPeer,
      }}
    >
      {children}
    </VoiceChatContext.Provider>
  );
}
